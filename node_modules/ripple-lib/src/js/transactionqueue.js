
/**
 * Manager for pending transactions
 */

function TransactionQueue() {
  this._queue         = [ ];
  this._idCache       = { };
  this._sequenceCache = { };
};

/**
 * Store received (validated) sequence
 */

TransactionQueue.prototype.addSequence = function(sequence, callback) {
  this._sequenceCache[sequence] = true;

  if (typeof callback === 'function') callback();
};

/**
 * Check that sequence number has been consumed by a validated
 * transaction
 */

TransactionQueue.prototype.hasSequence = function(sequence, callback) {
  var result = this._sequenceCache[sequence] || false;

  return (typeof callback === 'function') ? callback(result) : result;
};

/**
 * Store received (validated) ID transaction
 */

TransactionQueue.prototype.addValidated = function(id, transaction, callback) {
  this._idCache[id] = transaction;

  if (typeof callback === 'function') callback();
};

/**
 * Check that a particular transaction has been validated
 * by any of its submittedIDs being received (and cached)
 */

TransactionQueue.prototype.getValidated  = function(tx, callback) {
  var result = null;

  for (var i=0; i<tx.submittedIDs.length; i++) {
    var hash = tx.submittedIDs[i];
    if (result = this._idCache[hash]) break;
  }

  return (typeof callback === 'function') ? callback(result): result;
};

TransactionQueue.prototype.addSubmitted = function(tx, id, callback) {
  if (tx.submittedIDs.indexOf(id) === -1) {
    tx.submittedIDs.unshift(id);
    tx.emit('signed', id);
    tx.emit('id', id);
  }

  if (typeof callback === 'function') callback();
};

/**
 * Get a submitted transaction by ID. Transactions
 * may have multiple associated IDs.
 */

TransactionQueue.prototype.getSubmitted = function(id, callback) {
  var result = null;

  for (var i=0, tx; tx=this._queue[i]; i++) {
    if (~tx.submittedIDs.indexOf(id)) {
      result = tx;
      break;
    }
  }

  return (typeof callback === 'function') ? callback(result): result;
};

/**
 * Remove a transaction from the queue
 */

TransactionQueue.prototype.remove = function(tx, callback) {
  // ND: We are just removing the Transaction by identity
  var i = this._queue.length;

  while (i--) {
    if (this._queue[i] === tx) {
      this._queue.splice(i, 1);
      break;
    }
  }

  if (typeof callback === 'function') callback();
};

TransactionQueue.prototype.add =
TransactionQueue.prototype.push = function(tx) {
  this._queue.push(tx);
};

TransactionQueue.prototype.forEach = function(fn) {
  this._queue.forEach(fn);
};

/**
 * Get pending length
 */

TransactionQueue.prototype.length = function() {
  return this._queue.length;
};

exports.TransactionQueue = TransactionQueue;
